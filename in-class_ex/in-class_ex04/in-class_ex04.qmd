---
title: "In-Class Exercise 4: 2nd Order Spatial Point Patterns Analysis"
date: "30 January 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Overview

Spatial point processes of childcare centers in Singapore using 2nd order spatial point pattern analysis methods.

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

Importing spatial data - use `sf`package

```{r}
# point feature data providing both location and attribute info of childcare centres
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
# polygon feature data showing the national boundary of Singapore
sg_sf <- st_read(dsn = "data", layer="CostalOutline")

# polygon feature data providing info of URA 2014 MasterPlan Planning Subzone boundary data
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")

# Dataframe with geometric properties
  # this is spatial data in the sf form
  # while this is fine with most functions (tidyverse family) that work well with tibble dataframe
  # but do take note will you need to drop the geometric properties for other methods...
```

Plotting the map of childcare centers:

```{r}
tmap_mode("view")
tm_shape(childcare_sf)+
  tm_dots(alph=0.5, # transparency (intensity of colour based on value)
          size=0.01)+
  tm_view(set.zoom.limits=c(11,24)) # zoom-out value, zoom-in value
```

```{r}
# tm_shape(sg_sf) +
#   tm_polygons() +
# tm_shape(mpsz_sf) +
#   tm_polygons() +
# tm_shape(childcare_sf)+
#   tm_dots()
```

Converting `sf` dataframe into `SpatialPointsDataFrame`.

```{r}
# because we want to use spatstat which requires analytical data in ppp object form we need to convert the data 
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

Display the information of these 3 Spatial classes

```{r}
childcare #Geometry type = POINT
```

```{r}
mpsz # Spatial Polygons DataFrame
```

```{r}
sg # Spatial Polygons DataFrame
```

Converting `SpatialPointsDataFrame` into Formal Class `SpatialPoints`

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Converting them into **ppp** format to be understood by `spatstat`

```{r}
childcare_ppp = as(childcare_sp, "ppp")
```

Handling duplicated point events

```{r}
# check whether there is any duplicate points and push the datapoints slightly through jittering to avoid duplication.
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry=TRUE,
                             nsim=1,
                             drop=TRUE)

any(duplicated(childcare_ppp_jit))
```

```{r}
summary(childcare_ppp_jit)
```

Creating an `owin` object to confine the analysis within a geographical area (in this case, Singapore boundary)

```{r}
sg_owin <- as(sg_sp, "owin")

childcareSG_ppp = childcare_ppp[sg_owin]
plot(childcareSG_ppp)
summary(childcareSG_ppp)
```

### 1st Order Spatial Analysis

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes

Calculating KDE using fixed bandwidth

```{r}
# bw.diggle() automatic bandwidth selection method
# spatial interpolation is gaussian
# intensity estimate is correct for edge bias

# rescalling to convert unit of measurement from m to km
# makes it easier to comprehend the KDE
  # Look at the scale, 0-5 childcare centers within a search radius of 1km
childcareSG_ppp.km = rescale(childcareSG_ppp, 1000, "km")

# computing KDE using fixed bandwidth
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 

plot(kde_childcareSG_bw)

# please note that there are other bandwidth calculation methods other than bw.diggle
  # bw.CvL
  # bw.scott
  # bw.ppl
```

There are two ways to compute KDE using adaptive bandwidth:

-   `densityVoronoi`

-   `densityAdaptiveKernal`

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

This KDE map shown above is an image file. It does not have any coordinates and we don't know exactly where the location is. So we need to convert the image into **Grid Object**.

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG_bw)
spplot(gridded_kde_childcareSG_bw)
```

```{r}
# then we create a rasterlayer
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
# but the crs property will be NA - so we will add the appropriate crs
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

-   performing **confirmatory spatial point patterns analysis** by using **nearest neighbour** statistics

### 2nd Order Spatial Analysis

```{r}
# extract study area
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]

# convert the spatial polygons dataframe into generic spatialpolygon layers
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")

# creating owin object
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")

# combining childcare points and study area
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]

# rescale() to km
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")

# plot all study areas
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

-   G-function - measures the distribution of the distances from an arbitrary event to its nearest event.

```{r}
# Gest() is used to compute the G-function estimation
# envelope() is used to perform monte carlo simulation

G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

```{r}
# H0: the distribution of childcare services at CCK are randomly distributed
# H1: the distribution of childcare services at CCK are not randomly distributed
# Null hypothesis is rejected if p-value is smaller than alpha value of 0.001
  # 49 - 95%, 99 - 99%, 999 - 99.9%
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

**How to analyse the above-mentioned graph:\
**There is insufficient statistical evidence to reject the null hypothesis that the distribution is random.

**How to read the graph:**

Anything below the red line is regular pattern, anything above shows clustering. Inside the grey area, cannot reject the null hypothesis, outside grey area = statistically significant to reject.

-   F-function

```{r}
F_CK = Fest(childcare_ck_ppp) # can do correction = "best"
plot(F_CK)
```

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

-   K-function

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

-   L-function

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```
