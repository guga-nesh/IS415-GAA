---
title: "Take Home Exercise 02: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district Level, DKI Jakarta"
date: "17 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Problem Context

In late December 2019, the COVID-19 outbreak was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. COVID-19 can be deadly with a 2% case fatality rate.

In response to this, Indonesia commenced its COVID-19 vaccination program on 13 January 2021, and as of 5 February 2023, over 204 million people had received the first dose of the vaccine, and over 175 million people had been fully vaccinated, with Jakarta having the highest percentage of population fully vaccinated.

However despite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jakarta. The question is where are the sub-districts with a relatively higher number of vaccination rate and how have they changed over time.

The assignment website can be found [here](https://is415-ay2022-23t2.netlify.app/th_ex2.html).

## Objectives

Exploratory Spatial Data Analysis (ESDA) holds tremendous potential to address complex problems facing society. In this study, we will need to use it to uncover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta namely:

-   Choropleth Mapping and Analysis

-   Local Gi\* Analysis

-   Emerging Hot Spot Analysis (EHSA)

## Setup

### Packages used

These are the R packages that we'll need for our analyses:

-   **sf** - used for importing, managing, and processing geospatial data

-   **sfdep** - an `sf` and `tidyverse` friendly interface to compute spatial dependence

-   **tidyverse** - collection of packages for performing data science tasks such as importing, wrangling, and visualising data

-   **tmap** - for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API

-   **readxl** - for reading .xlsx files. It is part of the `tidyverse` collection.

```{r}
pacman::p_load(sf, sfdep, tidyverse, tmap)
```

### Datasets used

+------------+--------------------------------------------------------------------------------------------------------------------------------+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Type       | Name                                                                                                                           | Format | Description                                                                                                                                                                                   |
+============+================================================================================================================================+========+===============================================================================================================================================================================================+
| Geospatial | [DKI Jakarta Provincial Village Boundary](https://www.indonesia-geospasial.com/2020/04/download-shapefile-shp-batas-desa.html) | .shp   | District level boundary in DKI Jakarta. Please take note that the data is from 2019.                                                                                                          |
+------------+--------------------------------------------------------------------------------------------------------------------------------+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Aspatial   | [District Based Vaccination History](https://riwayat-file-vaksinasi-dki-jakarta-jakartagis.hub.arcgis.com/)                    | .xlsx  | Daily .csv files containing all vaccinations done at the sub-district level (i.e., kelurahan) in DKI Jakarta. The files consider the number of doses given to the following groups of people: |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Mutual Cooperation Vaccination (Ages 18+)                                                                                                                                                 |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Vaccination of Health Workers (Ages 18+)                                                                                                                                                  |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Elderly Vaccination (Ages 18+)                                                                                                                                                            |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Public Service Vaccination (Ages 18+)                                                                                                                                                     |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Stage 3 Vaccination (General Community, Pre-Elderly, Vulnerable)                                                                                                                          |
|            |                                                                                                                                |        |                                                                                                                                                                                               |
|            |                                                                                                                                |        | -   Youth Vaccination (Ages 12-17)                                                                                                                                                            |
+------------+--------------------------------------------------------------------------------------------------------------------------------+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## Data Wrangling: Geospatial Data

### Importing Geospatial Data

```{r}
jakarta <- st_read(dsn="data/geospatial",
                   layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

Information gathered on `jakarta` :

-   Data Type: **sf** collection

-   Geometry Type: Multipolygon

-   Shape: 269 features, 161 fields

-   CRS: WGS 84 - 'The World Geodetic System (WGS)'.

::: callout-note
The assigned CRS does not seem appropriate. In fact, the assignment requires us to re-assign the CRS to DGN95. We'll fix this in Section 4.2.3.
:::

### Data pre-processing

Before we can visualise our data, we need to ensure that the data is validated by handling invalid geometries and missing values.

*This section was done by referencing sample submissions done by two seniors, credit to:*

-   [*Xiao Rong Wong's 'Detecting Spatio-Temporal Patterns of COVID-19 in Central Mexico'*](https://rpubs.com/xiaorongw/IS415_Take-home_Ex02)

-   [*Megan Sim Tze Yen's 'Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia'*](https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/#data-pre-processing)

Afterwards, we can work on doing the pre-processing on the `jakarta` data as per the requirements of the assignment.

#### Handling invalid geometries

```{r}
length(which(st_is_valid(jakarta) == FALSE))
```

::: callout-note
`st_is_valid()` checks whether a geometry is valid. It returns a logical vector indicating for each geometries of `jakarta` whether it is valid. The documentation for this can be found [here](https://r-spatial.github.io/sf/reference/valid.html).
:::

From the above output, we can see that the geometry is valid 👍

#### Handling missing values

```{r}
jakarta[rowSums(is.na(jakarta))!=0,]
```

::: callout-note
`rowSums()` method calculates the sum of each row of a data frame. Please refer to the documentation [here](https://www.rdocumentation.org/packages/raster/versions/3.6-14/topics/rowSums).

`is.na()` is a generic method that indicates which elements are missing. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/NA).

`jakarta` 'wrapper' prints rows that contain NA values.
:::

From the output shown above we can see that there are NA values 👎

In fact, there are two rows with missing values. However, it's hard to tell which columns the NA values are in since the output is so long and messy. Let's just retrieve the columns with missing values.

```{r}
names(which(colSums(is.na(jakarta))>0))
```

::: callout-note
`colSum()` helps form sum for data frame by column. Please refer to the documentation [here](https://www.rdocumentation.org/packages/Matrix/versions/1.5-3/topics/colSums).

`which()` gives the TRUE indices of a logical object, allowing for array indices. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/which).

`names()` is used to get or set the names of an object. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/names).
:::

There are two rows with missing values in the columns shown above. Let's see what they mean... Google Translate tells us that: 🤔

-   "KAB_KOTA" = REGENCY_CITY

-   "KECAMATAN" = SUB-DISTRICT

-   "DESA_KELUR" = VILLAGE_KELUR

We can remove all rows with missing values under the "DESA_KELUR" (i.e., VILLAGE level) column since we are only interested in the sub-district and potentially city level data.

::: callout-note
Later we find out that the definition of these columns by Google Translate are not 100% accurate. But it's okay as this does not affect our analysis for now.
:::

*Nonetheless, it should be noted that in this particular case removing the missing values from any of the columns will yield the same result.*

```{r}
jakarta <- na.omit(jakarta, c("DESA_KELUR"))
```

::: callout-note
`na.omit()` is used to handle missing values in objects. In this case, we input the `object`(must be an R object) and the `target.colnames` (a vector of names for the target columns to operate upon, if present in `object`. Please refer to the documentation [here](https://www.rdocumentation.org/packages/photobiology/versions/0.10.6/topics/na.omit).
:::

Let's check if we have removed the rows with missing values:

```{r}
jakarta[rowSums(is.na(jakarta))!=0,]
```

Looks good! 😎 But we still have 3 other pre-processing steps to do...

#### Re-assign Coordinate Reference System (CRS)

The CRS of `jakarta` is WGS 84. The assignment requires us to use the national CRS of Indonesia [*( DGN95 / Indonesia TM-3 zone 54.1)*](https://epsg.io/23845) since our dataset is specific to Indonesia.

```{r}
st_crs(jakarta)
```

Let's re-assign using EPSG code 23845 and check the results.

```{r}
jakarta <- st_transform(jakarta, 23845)
st_crs(jakarta)
```

::: callout-note
`st_transform()` is used to transform or convert coordinates of a simple feature. Please refer to the documentation [here](https://search.r-project.org/CRAN/refmans/sf/html/st_transform.html).

`st_crs()` is used to retrieve the coordinate reference system from an **sf** or **sfc** object. Please refer to the documentation [here](https://www.rdocumentation.org/packages/sf/versions/0.2-4/topics/st_crs).
:::

#### Exclude all outer islands from `jakarta`

The assignment requires us to remove all outer islands from `jakarta`. Let's plot the geometry of `jakarta` to see what we're working with.

```{r}
plot(jakarta['geometry'])
```

From the visualisation we can see that there are some outer islands scattered towards the north. Let's remove them.

In Section 4.2.2, we saw that the data is grouped by ***KAB_KOTA*** (i.e., CITY), ***KECAMATAN*** (i.e., SUB-DISTRICT), and ***DESA_KELUR*** (i.e., "VILLAGE"). Let's see the different cities we have in DKI Jakarta.

```{r}
unique(jakarta$KAB_KOTA)
```

The output shows us that there are 6 different cities in DKI Jakarta. 5 of them are prefixed with the string "JAKARTA" while one of them isn't. Let's plot this data to see if the one without the prefix represents the outer islands.

```{r}
tm_shape(jakarta) + 
  tm_polygons("KAB_KOTA")
```

It seems our suspicions are correct, the outer islands are those cities without the "JAKARTA" prefix. In fact, "KEPULAUAN SEBIRU" can be directly translated to "Thousand Islands" in English. Let's remove them and check the results.

```{r}
jakarta <- jakarta %>% filter(grepl("JAKARTA", KAB_KOTA))

unique(jakarta$KAB_KOTA)
```

::: callout-note
`grepl()` is used to search for matches to argument `pattern` (in our case its "JAKARTA") within each element of a character vector. Please find the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/grep).
:::

```{r}
plot(jakarta$geometry)
```

Looks good! 😎

#### Retain first nine fields in `jakarta`

The assignment requires us to only retain the first 9 fields of the **sf** data frame. Let's do this.

```{r}
jakarta <- jakarta[,0:9]

jakarta
```

From the assignment we know that the ninth field is "JUMLAH_PEN". The output generated above matches this information.

#### Rename Columns for better understanding

For better understanding of the data, let us rename the columns to their English translation. For this we will use the `rename()` function.

::: callout-note
Since Google Translate has been giving me contradicting answers 😓, I have decided to use this [wiki page](https://en.wikipedia.org/wiki/Subdivisions_of_Indonesia) as a guide.
:::

```{r}
# take note of the hierarchy of subdivisions of Indonesia

jakarta <- jakarta %>%
  rename(
    object_id = OBJECT_ID,
    village_code = KODE_DESA,
    
    # fifth level
    village = DESA,
    code = KODE,
    
    # first level
    province = PROVINSI,
    
    # second level
    city = KAB_KOTA,
    
    # third level
    district = KECAMATAN,
    
    # fourth level - assumption made: KELUR = KELURAHAN
    sub_district = DESA_KELUR,
    total_population = JUMLAH_PEN
  )
```

::: callout-note
`rename()` is a method under the **dplyr** library. It changes the names of individual variables using the `new_name = old_name` syntax.

side note: `rename_with()` renames columns using a function. Please refer to the documentation [here](https://dplyr.tidyverse.org/reference/rename.html).
:::

We have completed the data pre-processing steps for the geospatial data 🥳 Let's move on to the aspatial data.

## Data Wrangling: Aspatial Data

In this section, we'll be importing and performing some basic pre-processing on the COVID-19 vaccination datasets.

### Importing Aspatial Data

The assignment requires us to compute the vaccination rate from July 2021 to June 2022 at the sub-district (i.e., kelurahan) level. We will be taking the data compiled on the [**last day**]{.underline} of each month to retrieve the monthly cumulative records of COVID-19 vaccinations from the above-mentioned time period.

#### Primary Data Exploration

Since we will need to import 12 files (which is a lot), let's look at the structure of one of them to figure what kind of data we have and how we can pre-process it moving forward.

```{r}
july_2021 <- readxl::read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Juli 2021).xlsx")

glimpse(july_2021)
```

There seems to be a quite a few columns so let's take a look at what each of them mean... 🤔

According to Google Translate:

-   SASARAN = target

-   BELUM VAKSIN = not yet vaccinated

-   JUMLAH DOSIS 1 = number of doses 1

-   JUMLAH DOSIS 2 = number of doses 2

-   TOTAL VAKSIN DEBERIKAN = total number of vaccines administered

-   LANSIA DOSIS 1 = number of doses given to elderly 1

-   LANSIA DOSIS 2 = number of doses given to elderly 2

-   LANSIA TOTAL VAKSIN DIBERIKAN = total number of vaccines given to elderly

-   PELAYAN PUBLIK DOSIS 1 = number of doses given to public service 1

-   PELAYAN PUBLIK DOSIS 2 = number of doses given to public service 2

-   PELAYAN PUBLIK TOTAL VAKSIN DIBERIKAN = total number of vaccines given to public service

-   GOTONG ROYONG DOSIS 1 = number of doses given to mutual cooperation 1

-   GOTONG ROYONG DOSIS 2 = number of doses given to mutual cooperation 2

-   GOTONG ROYONG TOTAL VAKSIN DIBERIKAN = total number of vaccines given to mutual cooperation

-   TENAGA KESEHATAN DOSIS 1 = number of doses given to healthcare workers 1

-   TENAGA KESEHATAN DOSIS 2 = number of doses given to healthcare workers 2

-   TENEGA KESEHATAN TOTAL VAKSIN DIBERIKAN = total number of vaccines given to healthcare workers

-   TAHAPAN 3 DOSIS 1 = number of stage 3 doses 1

-   TAHAPAN 3 DOSIS 2 = number of stage 3 doses 2

-   TAHAPAN 3 TOTAL VAKSIN DIBERIKAN = total number of stage 3 doses administered

-   REMAJA DOSIS 1 = number of doses given to teenagers 1

-   REMAJA DOSIS 2 = number of doses given to teenagers 2

-   REMAJA TOTAL VAKSIN DIBERIKAN = total number of vaccines given to teenagers
