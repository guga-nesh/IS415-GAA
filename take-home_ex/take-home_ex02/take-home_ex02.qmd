---
title: "Take Home Exercise 02: Spatio-temporal Analysis of COVID-19 Vaccination Trends at the Sub-district Level, DKI Jakarta"
date: "17 February 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Problem Context

In late December 2019, the COVID-19 outbreak was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. COVID-19 can be deadly with a 2% case fatality rate.

In response to this, Indonesia commenced its COVID-19 vaccination program on 13 January 2021, and as of 5 February 2023, over 204 million people had received the first dose of the vaccine, and over 175 million people had been fully vaccinated, with Jakarta having the highest percentage of population fully vaccinated.

However despite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jakarta. The question is where are the sub-districts with a relatively higher number of vaccination rate and how have they changed over time.

The assignment can be found [here](https://is415-ay2022-23t2.netlify.app/th_ex2.html).

## Objectives

Exploratory Spatial Data Analysis (ESDA) holds tremendous potential to address complex problems facing society. In this study, we will need to use it to uncover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta namely:

-   Choropleth Mapping and Analysis

-   Local Gi\* Analysis

-   Emerging Hot Spot Analysis (EHSA)

## Setup

### Packages used

These are the R packages that we'll need for our analyses:

-   **sf** - used for importing, managing, and processing geospatial data

-   **sfdep** - an `sf` and `tidyverse` friendly interface to compute spatial dependence

-   **tidyverse** - collection of packages for performing data science tasks such as importing, wrangling, and visualising data

-   **tmap** - for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API

-   **readxl** - for reading .xlsx files. It is part of the `tidyverse` collection.

-   **hash** - used to create a hash object. I have used this to convert the month spelling from Bahasa Indonesia to English. This is done so that when the data is visualised it is clear to all.

-   **moments** - used to call the `skewness()` function to calculate skewness of the data.

```{r}
pacman::p_load(sf, sfdep, tidyverse, tmap, hash, moments)
```

### Datasets used

+------------+--------------------------------------------------------------------------------------------------------------------------------+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Type       | Name                                                                                                                           | Format  | Description                                                                                                                                                                                   |
+============+================================================================================================================================+=========+===============================================================================================================================================================================================+
| Geospatial | [DKI Jakarta Provincial Village Boundary](https://www.indonesia-geospasial.com/2020/04/download-shapefile-shp-batas-desa.html) | .shp    | District level boundary in DKI Jakarta. Please take note that the data is from 2019.                                                                                                          |
+------------+--------------------------------------------------------------------------------------------------------------------------------+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Aspatial   | [District Based Vaccination History](https://riwayat-file-vaksinasi-dki-jakarta-jakartagis.hub.arcgis.com/)                    | .xlsx   | Daily .csv files containing all vaccinations done at the sub-district level (i.e., kelurahan) in DKI Jakarta. The files consider the number of doses given to the following groups of people: |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Mutual Cooperation Vaccination (Ages 18+)                                                                                                                                                 |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Vaccination of Health Workers (Ages 18+)                                                                                                                                                  |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Elderly Vaccination (Ages 18+)                                                                                                                                                            |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Public Service Vaccination (Ages 18+)                                                                                                                                                     |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Stage 3 Vaccination (General Community, Pre-Elderly, Vulnerable)                                                                                                                          |
|            |                                                                                                                                |         |                                                                                                                                                                                               |
|            |                                                                                                                                |         | -   Youth Vaccination (Ages 12-17)                                                                                                                                                            |
+------------+--------------------------------------------------------------------------------------------------------------------------------+---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## Data Wrangling: Geospatial Data

### Importing Geospatial Data

```{r}
jakarta <- st_read(dsn="data/geospatial",
                   layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

Information gathered on `jakarta` :

-   Data Type: **sf** collection

-   Geometry Type: Multipolygon

-   Shape: 269 features, 161 fields

-   CRS: WGS 84 - 'The World Geodetic System (WGS)'.

::: callout-note
The assigned CRS does not seem appropriate. In fact, the assignment requires us to re-assign the CRS to DGN95. We'll fix this in Section 4.2.3.
:::

### Data pre-processing

Before we can visualise our data, we need to ensure that the data is validated by handling invalid geometries and missing values.

*This section was done by referencing sample submissions done by two seniors, credit to:*

-   [*Xiao Rong Wong's 'Detecting Spatio-Temporal Patterns of COVID-19 in Central Mexico'*](https://rpubs.com/xiaorongw/IS415_Take-home_Ex02)

-   [*Megan Sim Tze Yen's 'Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia'*](https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/#data-pre-processing)

Afterwards, we can work on doing the pre-processing on the `jakarta` data as per the requirements of the assignment.

#### Handling invalid geometries

```{r}
length(which(st_is_valid(jakarta) == FALSE))
```

::: callout-note
`st_is_valid()` checks whether a geometry is valid. It returns a logical vector indicating for each geometries of `jakarta` whether it is valid. The documentation for this can be found [here](https://r-spatial.github.io/sf/reference/valid.html).
:::

From the above output, we can see that the geometry is valid 👍

#### Handling missing values

```{r}
jakarta[rowSums(is.na(jakarta))!=0,]
```

::: callout-note
`rowSums()` method calculates the sum of each row of a data frame. Please refer to the documentation [here](https://www.rdocumentation.org/packages/raster/versions/3.6-14/topics/rowSums).

`is.na()` is a generic method that indicates which elements are missing. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/NA).

`jakarta` 'wrapper' prints rows that contain NA values.
:::

From the output shown above we can see that there are NA values 👎

In fact, there are two rows with missing values. However, it's hard to tell which columns the NA values are in since the output is so long and messy. Let's just retrieve the columns with missing values.

```{r}
names(which(colSums(is.na(jakarta))>0))
```

::: callout-note
`colSum()` helps form sum for data frame by column. Please refer to the documentation [here](https://www.rdocumentation.org/packages/Matrix/versions/1.5-3/topics/colSums).

`which()` gives the TRUE indices of a logical object, allowing for array indices. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/which).

`names()` is used to get or set the names of an object. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/names).
:::

There are two rows with missing values in the columns shown above. Let's see what they mean... Google Translate tells us that: 🤔

-   "KAB_KOTA" = REGENCY_CITY

-   "KECAMATAN" = SUB-DISTRICT

-   "DESA_KELUR" = VILLAGE_KELUR

We can remove all rows with missing values under the "DESA_KELUR" (i.e., VILLAGE level) column since we are only interested in the sub-district and potentially city level data.

::: callout-note
Later we find out that the definition of these columns by Google Translate are not 100% accurate. But it's okay as this does not affect our analysis for now.
:::

*Nonetheless, it should be noted that in this particular case removing the missing values from any of the columns will yield the same result.*

```{r}
jakarta <- na.omit(jakarta, c("DESA_KELUR"))
```

::: callout-note
`na.omit()` is used to handle missing values in objects. In this case, we input the `object`(must be an R object) and the `target.colnames` (a vector of names for the target columns to operate upon, if present in `object`. Please refer to the documentation [here](https://www.rdocumentation.org/packages/photobiology/versions/0.10.6/topics/na.omit).
:::

Let's check if we have removed the rows with missing values:

```{r}
jakarta[rowSums(is.na(jakarta))!=0,]
```

Looks good! 😎 But we still have 3 other pre-processing steps to do...

#### Re-assign Coordinate Reference System (CRS)

The CRS of `jakarta` is WGS 84. The assignment requires us to use the national CRS of Indonesia [*( DGN95 / Indonesia TM-3 zone 54.1)*](https://epsg.io/23845) since our dataset is specific to Indonesia.

```{r}
st_crs(jakarta)
```

Let's re-assign using EPSG code 23845 and check the results.

```{r}
jakarta <- st_transform(jakarta, 23845)
st_crs(jakarta)
```

::: callout-note
`st_transform()` is used to transform or convert coordinates of a simple feature. Please refer to the documentation [here](https://search.r-project.org/CRAN/refmans/sf/html/st_transform.html).

`st_crs()` is used to retrieve the coordinate reference system from an **sf** or **sfc** object. Please refer to the documentation [here](https://www.rdocumentation.org/packages/sf/versions/0.2-4/topics/st_crs).
:::

#### Exclude all outer islands from `jakarta`

The assignment requires us to remove all outer islands from `jakarta`. Let's plot the geometry of `jakarta` to see what we're working with.

```{r}
plot(jakarta['geometry'])
```

From the visualisation above, we can see that there are some outer islands scattered towards the north. Let's remove them.

In Section 4.2.2, we saw that the data is grouped by ***KAB_KOTA*** (i.e., CITY), ***KECAMATAN*** (i.e., SUB-DISTRICT), and ***DESA_KELUR*** (i.e., "VILLAGE"). Let's see the different cities we have in DKI Jakarta.

```{r}
unique(jakarta$KAB_KOTA)
```

The output shows us that there are 6 different cities in DKI Jakarta. 5 of them are prefixed with the string "JAKARTA" while one of them isn't. Let's plot this data to see if the one without the prefix represents the outer islands.

```{r}
tm_shape(jakarta) + 
  tm_polygons("KAB_KOTA")
```

It seems our suspicions are correct, the outer islands are those cities without the "JAKARTA" prefix. In fact, according to Google Translate, "KEPULAUAN SEBIRU" can be directly translated to "Thousand Islands" in English. Let's remove them and check the results.

```{r}
jakarta <- jakarta %>% filter(grepl("JAKARTA", KAB_KOTA))

unique(jakarta$KAB_KOTA)
```

::: callout-note
`grepl()` is used to search for matches to argument `pattern` (in our case its "JAKARTA") within each element of a character vector. Please find the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/grep).
:::

```{r}
plot(jakarta$geometry)
```

Looks good! 😎

#### Retain first nine fields in `jakarta`

The assignment requires us to only retain the first 9 fields of the **sf** data frame. Let's do this.

```{r}
jakarta <- jakarta[,0:9]

jakarta
```

From the assignment we know that the ninth field is "JUMLAH_PEN". The output generated above matches this information.

#### Rename Columns for better understanding

For better understanding of the data, let us rename the columns to their English translation. For this we will use the `rename()` function.

::: callout-note
Since Google Translate has been giving me contradicting answers 😓, I have decided to use this [wiki page](https://en.wikipedia.org/wiki/Subdivisions_of_Indonesia) as a guide.
:::

```{r}
# take note of the hierarchy of subdivisions of Indonesia

jakarta <- jakarta %>%
  dplyr::rename(
    object_id = OBJECT_ID,
    village_code = KODE_DESA,
    
    # fifth level
    village = DESA,
    code = KODE,
    
    # first level
    province = PROVINSI,
    
    # second level
    city = KAB_KOTA,
    
    # third level
    district = KECAMATAN,
    
    # fourth level - assumption made: KELUR = KELURAHAN
    sub_district = DESA_KELUR,
    total_population = JUMLAH_PEN
  )
```

::: callout-note
`rename()` is a method under the **dplyr** library. It changes the names of individual variables using the `new_name = old_name` syntax.

side note: `rename_with()` renames columns using a function. Please refer to the documentation [here](https://dplyr.tidyverse.org/reference/rename.html).
:::

We have completed the data pre-processing steps for the geospatial data 🥳 Let's move on to the aspatial data.

## Data Wrangling: Aspatial Data

In this section, we'll be importing and performing some basic pre-processing on the COVID-19 vaccination datasets.

### Importing Aspatial Data

The assignment requires us to compute the vaccination rate from July 2021 to June 2022 at the sub-district (i.e., kelurahan) level.

::: callout-important
We will be taking the data compiled on the [**last day**]{.underline} of each month to retrieve the monthly records of COVID-19 vaccinations from the above-mentioned time period.
:::

#### Primary Data Exploration

Since we will need to import 12 files (which is a lot), let's look at the structure of one of them to figure what kind of data we have and how we can pre-process it moving forward.

```{r}
july_2021 <- readxl::read_xlsx("data/aspatial/Data Vaksinasi Berbasis Kelurahan (31 Juli 2021).xlsx")

glimpse(july_2021)
```

::: callout-note
`read_xlsx()` reads data from a .xlsx file. This function is from the **readxl** library under the **tidyverse** collection.

`glimpse()` makes it easier to see every column in a data frame. Please refer to the documentation [here](https://dplyr.tidyverse.org/reference/glimpse.html).
:::

Information gathered on `july_2021`:

-   Data Type: **tibble** data frame

-   Shape: 268 entries, 27 columns

There seems to be a quite a few columns...🤔

We will only need to take the "KELURAHAN" (i.e., sub- district level) , "SASARAN" (i.e., target) and the "BELUM VAKSIN" (i.e., number of people who have not been vaccinated yet) columns to calculate the vaccination rate for each month. We will look at how we can calculate this in Section 5.1.2.

*I learnt that only these columns were necessary for our analysis after receiving some advice from Professor Kam Tin Seong. Thank you so much for your guidance prof!* 😃

#### Creating a function to process our Aspatial Data

First, let us get all the file names for our aspatial data.

```{r}
setwd("data/aspatial")
library(readxl)
file.list <- list.files(pattern = "*.xlsx")
file.list
```

::: callout-note
*The above code chunk was referenced from [stackoverflow](https://stackoverflow.com/questions/32888757/how-can-i-read-multiple-excel-files-into-r). Credit to [Jaap](https://stackoverflow.com/users/2204410/jaap) for his detailed answer there.*

`setwd("dir")` is used to set the working directory to string "dir". Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd).

`library()` loads and attaches add-on packages. In this case, we need to use to `read_excel()` from **readxl**. Hence, we have loaded in that package. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/library).

`list.files()` is used to generate a vector of file names in the specified directory (from `setwd()`) with the pattern ("\*.xlsx"). Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list.files).
:::

Now, we are ready to create a function that processes all the files and merges all the data into a single sf data frame. Our output after all the pre-processing should look something like this:

![](images/image-196486236.png)

We will be using two functions to achieve the above-shown skeleton of the data frame:

-   `get_month_year()` - this is used to get the English month and year of each file. The output will be put into the final data frame under the "MONTH.YEAR" column

-   `aspatial_data_processing()` - this is used to process the data. The following steps are done:

    1.  Keep the necessary columns only (i.e., "KODE.KELURAHAN", "KELURAHAN", "SASARAN", "BELUM.VAKSIN"). We need the "KODE.KELURAHAN" column to join the processed aspatial data with the processed geospatial data. We will look at how to do this in Section 6.1.

    2.  Remove the first row of the **tibble data frame** as it is not needed (it contains the aggregate sum of the data)

    3.  Check for duplicates and remove them *(while primary exploration of data did not show duplicates, we must still be careful as not all files have been manually checked and there is a still a chance that duplicates exist)*

    4.  Check for invalid data (i.e., missing values/NA) and convert them to 0 for us to perform our calculations later on.

    5.  Calculate "VACCINATION.RATE"

    6.  Create "MONTH.YEAR" column (i.e., English translation of Month and the Year of data collected)

::: callout-important
Formula for Vaccination Rate is as follows:

$vaccination rate = (target - unvaccinated) / target$
:::

```{r}
get_month_year <- function(filepath) {
  
  # load hash library to get a hash object
  library(hash)
  
  # create hash object to map Bahasa Indonesian translation to English
  h <- hash()
  h[["Januari"]] <- "January"
  h[["Februari"]] <- "February"
  h[["Maret"]] <- "March"
  h[["April"]] <- "April"
  h[["Mei"]] <- "May"
  h[["Juni"]] <- "June"
  h[["Juli"]] <- "July"
  h[["Agustus"]] <- "August"
  h[["September"]] <- "September"
  h[["Oktober"]] <- "October"
  h[["November"]] <- "November"
  h[["Desember"]] <- "December"
  
  # get components of filepath to get date
  components = str_split(filepath, " ")
  month = h[[components[[1]][6]]]
  year = gsub("[^0-9.-].", "", components[[1]][7])
  
  return (paste(month, year, sep=" "))
}
```

::: callout-note
The **hash** library and method is used to create and work with has objects. Please refer to the documentation [here](https://www.rdocumentation.org/packages/hash/versions/3.0.1/topics/hash).

`str_split()` takes a character vector and returns a list. In this case, I used it to split up the `filepath` of type *\<string\>* so that I could extract the month and year. Please refer to the documentation [here](https://stringr.tidyverse.org/reference/str_split.html).

`gsub()` performs replacement of the values specified in regex with the value you have specified. In this case, I simply replaced all the non-numerical values with an empty string. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/grep).
:::

```{r}
aspatial_data_processing <- function(filepath) {
  
  vaccine_data = read_xlsx(filepath, .name_repair = "universal")
  
  # only keep the necessary columns
  vaccine_data = vaccine_data[, c("KODE.KELURAHAN", "KELURAHAN", "SASARAN", "BELUM.VAKSIN")]

  # remove the first row which has the aggregate sum of vaccination numbers
  vaccine_data = vaccine_data[-1, ]

  # check for duplicates and remove them
  vaccine_data <- vaccine_data%>%
  distinct(KELURAHAN, .keep_all = TRUE)
  
  # check for invalid data (missing values or NA) and convert them to 0
  vaccine_data[is.na(vaccine_data)] <- 0

  
  # calculate vaccination rate - (sasaran - belum vaksin)/sasaran
  vaccine_data$VACCINATION.RATE = (vaccine_data$SASARAN - vaccine_data$BELUM.VAKSIN)/vaccine_data$SASARAN
  
  # create date column
  month_year <- get_month_year(filepath)
  vaccine_data$MONTH.YEAR <- month_year
  
  return(vaccine_data)
}
```

::: callout-note
The argument `.name_repair` of the `read_xlsx()` method is used to automatically change column names to a certain format. "universal" names are unique and syntactic. Please refer to the documentation [here](https://readxl.tidyverse.org/reference/read_excel.html#arguments).

To remove duplicate values of a certain column, we can use the `distinct()` method. This only works for **dplyr** \>= 0.5. Please refer to this [stackoverflow link](https://stackoverflow.com/questions/22959635/remove-duplicated-rows-using-dplyr) that explains more in-depth.

I have used the `is.na()` method to convert all NA values to 0. The `vaccine_data` wrapper is used to make sure we transform the data inside that variable. Please refer to the documentation [here](https://www.rdocumentation.org/packages/ursa/versions/3.9.4/topics/is.na).
:::

#### Running `aspatial_data_processing()` on Aspatial Data

```{r}
setwd("data/aspatial")

dflist <- lapply(seq_along(file.list), function(x) aspatial_data_processing(file.list[x]))
```

::: callout-note
`seq_along()` is a built-in function in R that creates a vector that contains a sequence of numbers from 1 to the object's length. You can find an in-depth explanation of this method [here](https://r-lang.com/seq_along-function-in-r/).

We used `seq_along()` to create a vector so we can use `lapply()` (which only works on lists or vectors) to apply the `aspatial_data_processing()` to all the files.
:::

```{r}
library(plyr)

processed_aspatial_data <- ldply(dflist, data.frame)

glimpse(processed_aspatial_data)
```

::: callout-note
Here, we use the `ldply()` function from the **plyr** library to combine and return the results in a single data frame. Please refer to the documentation [here](https://www.rdocumentation.org/packages/plyr/versions/1.8.8/topics/ldply).
:::

#### Rename Columns for better understanding

```{r}
processed_aspatial_data <- processed_aspatial_data %>%
  dplyr::rename(
    village_code = KODE.KELURAHAN,
    sub_district = KELURAHAN,
    target = SASARAN,
    not_vaccinated = BELUM.VAKSIN,
    vaccination_rate = VACCINATION.RATE,
    month_year = MONTH.YEAR
  )
```

With that we have completed the Data Wrangling processes for the Aspatial Data 😎

Now, we can finally start analysing the data proper 📈

## Task 1: Choropleth Mapping and Analysis

In Section 2 we looked at the three main objectives of this assignment. Let's start with the first one. *Please take note that we have already calculated the monthly vaccination rate from July 2021 to June 2022 in section 5.1.2.*

Before we can create the choropleth maps to analyse the data we will need to combine the Spatial and Aspatial data.

### Combining both data frames using `left_join()`

We would like to join the two data sets on the "village_code" column. Let's take a look at the data to see if there are any discrepancies.

```{r}
setdiff(processed_aspatial_data$village_code, jakarta$village_code)
```

::: callout-note
`setdiff()` finds the (asymmetric) difference between two collections of objects. Please refer to the documentation [here](https://www.rdocumentation.org/packages/nat/versions/1.6.6/topics/setdiff).
:::

Hm... 🤔 while this might seem confusing at first we need to remember that we removed the outer islands from the Geospatial data in Section 4.2.4 but we didn't do that for the Aspatial data. We don't have to do this since `left_join()` helps us exclude these data automatically.

In fact, here are what these codes mean:

-   "3101011003" - PULAU HARAPAN

-   "3101011002" - PULAU KELAPA

-   "3101011001" - PULAU PANGGANG

-   "3101021003" - PULAU PARI

-   "3101021002" - PULAU TIDUNG

-   "3101021001" - PULAU UNTUNG JAWA

```{r}
jakarta_vaccination_rate <- left_join(jakarta, processed_aspatial_data, by = "village_code")
```

::: callout-note
`left_join()` is a function from the **dplyr** library that returns all rows from X (i.e., `jakarta`) and all columns from X and Y (i.e., `vax_data_jakarta`). Please refer to the documentation [here](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/join).
:::

### Mapping the Distribution of Vaccination Rate for DKI Jakarta over 12 months

#### Choosing the Data Classification Method

There are many data classification methods but the Natural Breaks (or "Jenks") method is useful as the class breaks are iteratively created in a way that best groups similar values together and maximises the differences between classes. However this classification is not recommended for data with low variances ([source](https://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization#:~:text=The%20Jenks%20classification%20method%20is,values%2C%20it%20will%20identify%20them.)).

We can use the Coefficient of Variation (CV) to check whether or variance is large or small. As a rule of thumb a CV \>= 1 indicates a relatively high variation, while CV \< 1 can be considered low ([source](https://statisticsbyjim.com/basics/coefficient-variation/)).

```{r}
# create a helper function to calculate CV for the different month_year(s)
print_variance <- function(data) {
  different_time_periods = unique(data$month_year)
  for (time_period in different_time_periods) {
    temp = filter(data, `month_year` == time_period)
    print(paste(time_period, '-', sd(temp$vaccination_rate)/mean(temp$vaccination_rate)))
  }
}
```

::: callout-note
`paste()` is used to concatenate vectors by converting them into characters. Here we have used it to print more than 1 variable. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/paste).

`sd()` computes the standard deviation of the values in `temp$vaccination_rate`. Please refer to the documentation [here](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/sd).

`mean()` computes the mean of the values in `temp$vaccination_rate`. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/mean).
:::

```{r}
# call function created in the previous code chunk
print_variance(jakarta_vaccination_rate)
```

From the above output, we can see that the CV for the vaccination_rate is pretty low. So maybe "Jenks" isn't the best method.

Another data classification method is the "Equal Interval" method. As Professor Kam has mentioned in his [slides](https://is415-ay2022-23t2.netlify.app/lesson/lesson03/lesson03-thematic_and_analytical_mapping#/9), this method divides the `vaccination_rate` values into equally sized classes. However, we should avoid this method if the data is skewed to one end or if we have 1 or 2 really large outlier values.

So let's check our data if it is skewed and if it has any outliers. For this, we will be using the `skewness()` and `hist()` methods to calculate the skewness and visualise the data respectively. Do note that as a rule of thumb if the skewness value is between -0.5 and 0.5 the data is relatively symmetrical.

```{r}
# create a helper function to calculate skewness for the different month_year(s)
print_skewness <- function(data) {
  different_time_periods = unique(data$month_year)
  for (time_period in different_time_periods) {
    temp = filter(data, `month_year` == time_period)
    print(paste(time_period, '-', moments::skewness(temp$vaccination_rate)))
  }
}
```

::: callout-note
`skewness()` computes the skewness of the data given (i.e., `temp$vaccination_rate`). Please refer to the documentation [here](https://www.rdocumentation.org/packages/e1071/versions/1.7-13/topics/skewness).
:::

```{r}
# call function created in the previous code chunk
print_skewness(jakarta_vaccination_rate)
```

From the above output we can see that all the data is relatively symmetrical. 😌

Let's plot the histograms to check if outliers are present as well!

```{r}
# create a helper function to draw histogram for the different month_year(s)
hist_plot <- function(df, time_period) {
hist(filter(jakarta_vaccination_rate, `month_year` == time_period)$vaccination_rate, ylab=NULL, main=time_period, xlab=NULL)
}
```

::: callout-note
`hist()` computes a histogram of the given values. Please refer to the documentation [here](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist).

We used this method as it is the easiest way to detect outliers ([source](https://www.reneshbedre.com/blog/find-outliers.html#histogram-scatterplot-and-boxplot)). Especially if the dataset is quite small.
:::

```{r}
#| code-fold: true
# call function created in the previous code chunk
par(mfrow = c(3,2))
hist_plot(jakarta_vaccination_rate, "July 2021")
hist_plot(jakarta_vaccination_rate, "August 2021")
hist_plot(jakarta_vaccination_rate, "September 2021")
hist_plot(jakarta_vaccination_rate, "October 2021")
hist_plot(jakarta_vaccination_rate, "November 2021")
hist_plot(jakarta_vaccination_rate, "December 2021")
```

```{r}
#| code-fold: true
# call function created in the previous code chunk
par(mfrow = c(3,2))
hist_plot(jakarta_vaccination_rate, "January 2022")
hist_plot(jakarta_vaccination_rate, "February 2022")
hist_plot(jakarta_vaccination_rate, "March 2022")
hist_plot(jakarta_vaccination_rate, "April 2022")
hist_plot(jakarta_vaccination_rate, "May 2022")
hist_plot(jakarta_vaccination_rate, "June 2022")
```

From our findings, we can say that the data is not skewed and there are not major outliers that we need to worry about 🥳 Hence, the "Equal Interval" method will be perfect for our choropleth maps.

#### Spatio-Temporal Mapping with custom breakpoints

To analyse the spatio-temporal change in vaccination rates over time we should use the same data classification method and use the same class intervals. This makes it easier for any comparisons to be made.

-   The Equal Interval data classification method will be utilised (as discussed in Section 6.2.1).

-   We will need to define our custom breaks to have a common classification scheme for the COVID-19 vaccination rates.

Let's take a look at the summary statistics for vaccination rates across the 12 months to determine the breakpoints:

```{r}
# summary stats for Vaccination Rates in July 2021
summary(filter(jakarta_vaccination_rate, `month_year` == "July 2021")$vaccination_rate)
```

```{r}
# summary stats for Vaccination Rates in November 2021
summary(filter(jakarta_vaccination_rate, `month_year` == "November 2021")$vaccination_rate)
```

```{r}
# summary stats for Vaccination Rates in March 2022
summary(filter(jakarta_vaccination_rate, `month_year` == "March 2022")$vaccination_rate)
```

```{r}
# summary stats for Vaccination Rates in June 2022
summary(filter(jakarta_vaccination_rate, `month_year` == "June 2022")$vaccination_rate)
```

::: callout-note
`summary()` is a generic function used to produce result summaries as shown above. Please refer to the documentation [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/summary). We used this here to find out the range of vaccination rates over the 12 months. We can see that the range is from 0.3701 to 0.8978.
:::

Hence, breakpoints can be defined with intervals of 0.1 where values range from 0.3 to 0.9.

Since we need to plot a map for each month let's start by creating a generic helper function to do it.

```{r}
# create a helper function to plot the choropleth map
choropleth_plotting <- function(df, month_name) {
  temp = filter(df, `month_year` == month_name)
  tm_shape(temp)+
  tm_fill("vaccination_rate",
          breaks = c(0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9),
          palette = "Blues",
          title = "Vaccination Rate",
          legend.hist = TRUE) +
  tm_layout(main.title = month_name,
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.40, 
            legend.width = 0.25,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
}
```

```{r}
#| code-fold: true
# call the functions for all the different months
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "July 2021"),
             choropleth_plotting(jakarta_vaccination_rate, "August 2021"))
```

```{r}
#| code-fold: true
# call the functions for all the different months
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "September 2021"),
             choropleth_plotting(jakarta_vaccination_rate, "October 2021"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "November 2021"),
           choropleth_plotting(jakarta_vaccination_rate, "December 2021"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "January 2022"),
             choropleth_plotting(jakarta_vaccination_rate, "February 2022"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "March 2022"),
             choropleth_plotting(jakarta_vaccination_rate, "April 2022"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(choropleth_plotting(jakarta_vaccination_rate, "May 2022"),
             choropleth_plotting(jakarta_vaccination_rate, "June 2022"))
```

### Observations from Equal Interval Choropleth Maps with Custom Breakpoints

![*The above gif was made by stitching the individual choropleths we created earlier on [ezgif](https://ezgif.com/maker).*](images/ezgif.com-optimize.gif)

-   There was an increase in vaccination rate all over Jakarta. There doesn't seem to be a single point from which it starts. However, it should be noted that top 3 sub-districts with the highest vaccination rates in July 2021 were **Kamal Muara**, **Halim Perdana Kusuma**, and **Kelapa Gading Timur**. While Halim Perdana Kusuma was still in the top 3 after a year, Kamal Muara and Kelapa Gading Timur were replaced by **Srengseng Sawah** and **Mabggarai Selatan**. Halim Perdana Kusuma remained one of the highest as it had a relatively low target of 28363.

-   After a year, the lowest vaccination rate in a sub-district was 78%. With this, we can see that the generally the population of Jakarta was very receptive to the COVID-19 vaccines.

-   Additionally, the gif tells us that the receptiveness of the vaccine seem to spread "inwards" where the bigger sub-districts tend to reach a higher vaccination rate quicker and gaps between them (i.e., the smaller sub-districts) were "filled-in" later on. Therefore, unequal distribution of vaccination rates among the sub-districts could possibly be attributed to their size. The Indonesian government might have focused their efforts on the largely populated areas to attain herd immunity quicker.
